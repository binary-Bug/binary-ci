name: 'Angular Build Action'
description: 'Reusable action for building Angular components and creating releases.'
inputs:
  component:
    description: 'Component name (e.g., piggy-ui)'
    required: true
  repo_owner:
    description: 'Repository owner prefix'
    required: true
  personal_access_token:
    description: 'GitHub Personal Access Token'
    required: true
  release_type:
    description: 'Release type (patch, minor, major)'
    required: true
  is_pre_release:
    description: 'Is this a pre-release?'
    required: false
    default: false
  should_update_version_json:
    description: 'Should update version.json?'
    required: false
    default: true
runs:
  using: "composite"
  steps:
    - name: Compose Repository Name
      id: repo_info
      run: |
        echo "REPO=${{ inputs.repo_owner }}${{ inputs.component }}" >> $GITHUB_OUTPUT
      shell: bash
    - name: Checkout Component Repo
      uses: actions/checkout@v4
      with:
        repository: ${{ steps.repo_info.outputs.REPO }}
        token: ${{ inputs.personal_access_token }}
        ref: master
    - name: Fetch current version variables
      id: fetch_vars
      run: |
        for V in MAJOR MINOR PATCH; do
          VAL=$(gh variable get "$V" --repo "${{ steps.repo_info.outputs.REPO }}")
          echo "$V=$VAL" >> $GITHUB_ENV
        done
      env:
        GITHUB_TOKEN: ${{ inputs.personal_access_token }}
      shell: bash
    - name: Calculate New Version
      id: versioning
      run: |
        MAJOR=${{ env.MAJOR }}
        MINOR=${{ env.MINOR }}
        PATCH=${{ env.PATCH }}
        if [[ "${{ inputs.release_type }}" == "major" ]]; then
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
        elif [[ "${{ inputs.release_type }}" == "minor" ]]; then
          MINOR=$((MINOR + 1))
          PATCH=0
        else
          PATCH=$((PATCH + 1))
        fi
        VERSION="v${MAJOR}.${MINOR}.${PATCH}"
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "MAJOR=$MAJOR" >> $GITHUB_OUTPUT
        echo "MINOR=$MINOR" >> $GITHUB_OUTPUT
        echo "PATCH=$PATCH" >> $GITHUB_OUTPUT
      shell: bash
    - name: Update version.json
      if: ${{ inputs.should_update_version_json }}
      run: |
        cd src/configs
        cat version.json
        rm version.json
        echo '{"version": "${{ steps.versioning.outputs.VERSION }}"}' > version.json
        cat version.json
      shell: bash
    - name: Set up Node.js version
      uses: actions/setup-node@v3
      with:
        node-version: "20.x"
    - name: Build Angular App
      run: |
        npm install
        npm run build
      shell: bash
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.component }}-${{ steps.versioning.outputs.VERSION }}
        path: "dist/${{ inputs.component }}/browser/"
    - name: Update version variables in component repo
      env:
        GH_TOKEN: ${{ inputs.personal_access_token }}
        REPO: ${{ steps.repo_info.outputs.REPO }}
        MAJOR: ${{ steps.versioning.outputs.MAJOR }}
        MINOR: ${{ steps.versioning.outputs.MINOR }}
        PATCH: ${{ steps.versioning.outputs.PATCH }}
      run: |
        for V in MAJOR MINOR PATCH; do
          gh variable set "$V" \
            --body "${!V}" \
            --repo "$REPO"
          echo "Updated $V=${!V}"
        done
      shell: bash
    - name: Checkout Component Repo (Full History)
      uses: actions/checkout@v4
      with:
        repository: ${{ steps.repo_info.outputs.REPO }}
        token: ${{ inputs.personal_access_token }}
        ref: master
        fetch-depth: 0
    - name: Create Git Tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "${{ steps.versioning.outputs.VERSION }}" \
                 -m "Release ${{ steps.versioning.outputs.VERSION }}"
        git push origin "${{ steps.versioning.outputs.VERSION }}"
      shell: bash
    - name: Generate Changelog
      run: |
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^)
        echo "Previous tag: $LAST_TAG"
        CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:'- %s')
        echo "CHANGELOG<<EOF" >> $GITHUB_ENV
        echo "$CHANGELOG" >> $GITHUB_ENV
        echo "EOF"      >> $GITHUB_ENV
      shell: bash
    - name: Create Release on Component via gh
      run: |
        COMPONENT=${{ inputs.component }}
        TAG=${{ steps.versioning.outputs.VERSION }}
        if [[ "${{ inputs.is_pre_release }}" == "true" ]]; then
          PRE="--prerelease"
        else
          PRE=""
        fi
        RUN_NUM=${{ github.run_number }}
        RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        gh release create "$TAG" \
          --repo "${{ steps.repo_info.outputs.REPO }}" \
          --title "${{ github.ref_name }} $TAG" \
          --notes "$(
            printf '## Changelog\n%s\n\n**Workflow run**: [%s](%s)\n\n_Generated by Binary CI_\n' \
              "${{ env.CHANGELOG }}" \
              "CI Run #${RUN_NUM}" \
              "${RUN_URL}"
          )" \
          --draft=false $PRE
      env:
        GITHUB_TOKEN: ${{ inputs.personal_access_token }}
      shell: bash
    - name: Checkout Repository
        uses: actions/checkout@v4
