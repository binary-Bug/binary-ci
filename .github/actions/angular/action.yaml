name: 'Angular Build Action'
description: 'Reusable action for building Angular components and creating releases.'
inputs:
  repo_name:
    description: 'Full repository name (owner/repo)'
    required: true
  version:
    description: 'Version string (e.g., v1.2.3)'
    required: true
  major:
    description: 'Major version number'
    required: true
  minor:
    description: 'Minor version number'
    required: true
  patch:
    description: 'Patch version number'
    required: true
  component:
    description: 'Component name (e.g., piggy-ui)'
    required: true
  repo_owner:
    description: 'Repository owner prefix'
    required: true
  personal_access_token:
    description: 'GitHub Personal Access Token'
    required: true
  release_type:
    description: 'Release type (patch, minor, major)'
    required: true
  is_pre_release:
    description: 'Is this a pre-release?'
    required: false
    default: false
  should_update_version_json:
    description: 'Should update version.json?'
    required: false
    default: true
outputs:
  VERSION:
    description: 'The calculated version'
    value: ${{ steps.versioning.outputs.VERSION }}
  RELEASE_URL:
    description: 'The GitHub release URL'
    value: ${{ steps.create_release.outputs.release_url }}
  ARTIFACT_URL:
    description: 'The GitHub Actions artifact download URL'
    value: ${{ steps.artifact_url.outputs.artifact_url }}
runs:
  using: "composite"
  steps:
    - name: Checkout Component Repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repo_name }}
        token: ${{ inputs.personal_access_token }}
        ref: master
    - name: Update version.json
      if: ${{ inputs.should_update_version_json }}
      run: |
        cd src/configs
        cat version.json
        rm version.json
        echo '{"version": "${{ inputs.version }}"}' > version.json
        cat version.json
      shell: bash
    - name: Set up Node.js version
      uses: actions/setup-node@v3
      with:
        node-version: "20.x"
    - name: Build Angular App
      run: |
        npm install
        npm run build
      shell: bash
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.component }}-${{ inputs.version }}
        path: "dist/${{ inputs.component }}/browser/"
    - name: Set Artifact Download URL
      id: artifact_url
      run: |
        ARTIFACT_NAME="${{ inputs.component }}-${{ inputs.version }}"
        ARTIFACT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo "artifact_url=$ARTIFACT_URL" >> $GITHUB_OUTPUT
      shell: bash
    - name: Update version variables in component repo
      env:
        GH_TOKEN: ${{ inputs.personal_access_token }}
        REPO: ${{ inputs.repo_name }}
        MAJOR: ${{ inputs.major }}
        MINOR: ${{ inputs.minor }}
        PATCH: ${{ inputs.patch }}
      run: |
        for V in MAJOR MINOR PATCH; do
          gh variable set "$V" \
            --body "${!V}" \
            --repo "$REPO"
          echo "Updated $V=${!V}"
        done
      shell: bash
    - name: Checkout Component Repo (Full History)
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repo_name }}
        token: ${{ inputs.personal_access_token }}
        ref: master
        fetch-depth: 0
    - name: Create Git Tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "${{ inputs.version }}" \
                 -m "Release ${{ inputs.version }}"
        git push origin "${{ inputs.version }}"
      shell: bash
    - name: Generate Changelog
      run: |
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^)
        echo "Previous tag: $LAST_TAG"
        CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:'- %s')
        echo "CHANGELOG<<EOF" >> $GITHUB_ENV
        echo "$CHANGELOG" >> $GITHUB_ENV
        echo "EOF"      >> $GITHUB_ENV
      shell: bash
    - name: Create Release on Component via gh
      id: create_release
      run: |
        COMPONENT=${{ inputs.component }}
        TAG=${{ inputs.version }}
        if [[ "${{ inputs.is_pre_release }}" == "true" ]]; then
          PRE="--prerelease"
        else
          PRE=""
        fi
        RUN_NUM=${{ github.run_number }}
        RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        gh release create "$TAG" \
          --repo "${{ inputs.repo_name }}" \
          --title "${{ github.ref_name }} $TAG" \
          --notes "$(
            printf '## Changelog\n%s\n\n**Workflow run**: [%s](%s)\n\n_Generated by Binary CI_\n' \
              "${{ env.CHANGELOG }}" \
              "CI Run #${RUN_NUM}" \
              "${RUN_URL}"
          )" \
          --draft=false $PRE
        # Manually build the release URL
        REPO_URL="https://github.com/${{ inputs.repo_name }}"
        RELEASE_URL="$REPO_URL/releases/tag/$TAG"
        echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ inputs.personal_access_token }}
      shell: bash
    - name: Checkout Repository
      uses: actions/checkout@v4
