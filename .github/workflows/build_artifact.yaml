name: Build Artifact

on:
  workflow_dispatch:
    inputs:
      component:
        description: "Select component"
        required: true
        type: choice
        options:
          - piggy-ui
          - piggy-api
          - piggy-db
      component_type:
        description: "Select component type"
        required: true
        type: choice
        options:
          - angular
          - .net
          - sql-dacpac
      is_minor_release:
        description: "Is this a minor release?"
        required: false
        type: boolean
      is_major_release:
        description: "Is this a major release?"
        required: false
        type: boolean

jobs:
  angular-build:
    if: ${{ github.event.inputs.component_type == 'angular' }}
    runs-on: ubuntu-latest
    environment: "ci-angular"

    steps:
      - name: Compose Repository Name
        id: repo_info
        run: |
          echo "REPO=${{ vars.REPO_OWNER }}${{ github.event.inputs.component }}" >> $GITHUB_OUTPUT

      - name: Checkout Component Repo
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.repo_info.outputs.REPO }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          ref: master

      - name: Fetch current version variables
        id: fetch_vars
        run: |
          for V in MAJOR MINOR PATCH; do
            VAL=$(gh variable get "$V" --repo "${{ steps.repo_info.outputs.REPO }}")
            echo "$V=$VAL" >> $GITHUB_ENV
          done
        env:
          GITHUB_TOKEN: ${{secrets.PERSONAL_ACCESS_TOKEN}}

      - name: Calculate New Version
        id: versioning
        run: |
          MAJOR=${{ env.MAJOR }}
          MINOR=${{ env.MINOR }}
          PATCH=${{ env.PATCH }}

          if [[ "${{ github.event.inputs.is_major_release }}" == "true" ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "${{ github.event.inputs.is_minor_release }}" == "true" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi

          VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "MAJOR=$MAJOR" >> $GITHUB_OUTPUT
          echo "MINOR=$MINOR" >> $GITHUB_OUTPUT
          echo "PATCH=$PATCH" >> $GITHUB_OUTPUT

      - name: Update version.json
        run: |
          cd src/configs
          cat version.json
          rm version.json
          echo '{"version": "${{ steps.versioning.outputs.VERSION }}"}' > version.json
          cat version.json

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: "20.x"

      - name: Build Angular App
        run: |
          npm install
          npm run build

      - name: Archive Artifact
        run: |
          mkdir -p release
          cp -r dist/${{ github.event.inputs.component }}/browser/* release/
          zip -r ${{ github.event.inputs.component }}-${{ steps.versioning.outputs.VERSION }}.zip release/

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.component }}-${{ steps.versioning.outputs.VERSION }}
          path: ${{ github.event.inputs.component }}-${{ steps.versioning.outputs.VERSION }}.zip

      - name: Update version variables in component repo
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          REPO: ${{ steps.repo_info.outputs.REPO }}
          MAJOR: ${{ steps.versioning.outputs.MAJOR }}
          MINOR: ${{ steps.versioning.outputs.MINOR }}
          PATCH: ${{ steps.versioning.outputs.PATCH }}
        run: |
          for V in MAJOR MINOR PATCH; do
            gh variable set "$V" \
              --body "${!V}" \
              --repo "$REPO"
            echo "Updated $V=${!V}"
          done

      - name: Checkout Component Repo (Full History)
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.repo_info.outputs.REPO }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          ref: master
          fetch-depth: 0

      - name: Create Git Tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ steps.versioning.outputs.VERSION }}" \
                   -m "Release ${{ steps.versioning.outputs.VERSION }}"
          git push origin "${{ steps.versioning.outputs.VERSION }}"

      - name: Generate Changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^)
          echo "Previous tag: $LAST_TAG"
          CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:'- %s')
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF"      >> $GITHUB_ENV

      - name: Create Release on Component via gh
        run: |
          COMPONENT=${{ github.event.inputs.component }}
          TAG=${{ steps.versioning.outputs.VERSION }}
          # determine prerelease flag
          if [[ "${{ github.event.inputs.is_major_release }}" == "false" && \
                "${{ github.event.inputs.is_minor_release }}" == "false" ]]; then
            PRE="--prerelease"
          else
            PRE=""
          fi
          RUN_NUM=${{ github.run_number }}
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          gh release create "$TAG" \
            --repo "${{ steps.repo_info.outputs.REPO }}" \
            --title "$TAG" \
            --notes "$(
              printf '## Changelog\n%s\n\n**Workflow run**: [%s](%s)\n\n_Generated by Binary CI_\n' \
                "${{ env.CHANGELOG }}" \
                "Run #${RUN_NUM}" \
                "${RUN_URL}"
            )" \
            --draft=false $PRE
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  dotnet-build:
    if: ${{ github.event.inputs.component_type == '.net' }}
    runs-on: windows-latest
    environment: "ci-dotnet"
    steps:
      - name: Placeholder for .NET build
        run: |
          echo "Build logic for .NET component: ${{ github.event.inputs.component }}"

  sql-dacpac-build:
    if: ${{ github.event.inputs.component_type == 'sql-dacpac' }}
    runs-on: windows-latest
    environment: "ci-sql-dacpac"
    steps:
      - name: Placeholder for SQL DACPAC build
        run: |
          echo "Build logic for SQL DACPAC component: ${{ github.event.inputs.component }}"
