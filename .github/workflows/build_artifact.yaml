name: '🏗️ Build Artifact'
run-name: "Build Artifact for ${{ github.event.inputs.component }}"

on:
  workflow_dispatch:
    inputs:
      component:
        description: "Select component"
        required: true
        type: choice
        options:
          - piggy-ui
          - piggy-api
          - piggy-db
      component_type:
        description: "Select component type"
        required: true
        type: choice
        options:
          - angular
          - .net
          - sql-dacpac
      release_type:
        description: Release type
        required: true
        type: choice
        options: [patch, minor, major]
      is_pre_release:
        description: "Is this a pre-release?"
        required: false
        type: boolean
      should_update_version_json:
        description: "Should update version.json?"
        required: false
        type: boolean
        default: true

jobs:
  setup-job:
    name: '🛠️ Setup Build Context'
    runs-on: ubuntu-latest
    outputs:
      component_type_capitalized: ${{ steps.capitalize_type.outputs.cap_type }}
    steps:
      - name: Capitalize Component Type
        id: capitalize_type
        run: |
          TYPE="${{ github.event.inputs.component_type }}"
          CAP_TYPE="$(echo ${TYPE:0:1} | tr '[:lower:]' '[:upper:]')${TYPE:1}"
          echo "cap_type=$CAP_TYPE" >> $GITHUB_OUTPUT
        shell: bash

  angular-build:
    name: '🅰️ ${{ needs.setup-job.outputs.component_type_capitalized }} Build'
    if: ${{ github.event.inputs.component_type == 'angular' }}
    needs: setup-job
    runs-on: ubuntu-latest
    environment: "ci-angular"
    outputs:
      version: ${{ steps.angular_build_action.outputs.VERSION }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Angular Build Action
        id: angular_build_action
        uses: ./.github/actions/angular
        with:
          component: ${{ github.event.inputs.component }}
          repo_owner: ${{ vars.REPO_OWNER }}
          personal_access_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          release_type: ${{ github.event.inputs.release_type }}
          is_pre_release: ${{ github.event.inputs.is_pre_release }}
          should_update_version_json: ${{ github.event.inputs.should_update_version_json }}

  dotnet-build:
    name: '⚙️ ${{ needs.setup-job.outputs.component_type_capitalized }} Build'
    if: ${{ github.event.inputs.component_type == '.net' }}
    needs: setup-job
    runs-on: windows-latest
    environment: "ci-dotnet"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Placeholder for .NET build
        run: |
          echo "Build logic for .NET component: ${{ github.event.inputs.component }}"

  sql-dacpac-build:
    name: '🗄️ ${{ needs.setup-job.outputs.component_type_capitalized }} Build'
    if: ${{ github.event.inputs.component_type == 'sql-dacpac' }}
    needs: setup-job
    runs-on: windows-latest
    environment: "ci-sql-dacpac"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Placeholder for SQL DACPAC build
        run: |
          echo "Build logic for SQL DACPAC component: ${{ github.event.inputs.component }}"

  create-build-summary:
    name: '📝 ${{ needs.setup-job.outputs.component_type_capitalized }} Output'
    needs:
      - setup-job
      - angular-build
      - dotnet-build
      - sql-dacpac-build
    runs-on: ubuntu-latest
    if: ${{ always() && (needs.angular-build.result == 'success' || needs.dotnet-build.result == 'success' || needs.sql-dacpac-build.result == 'success') }}
    steps:
      - name: Log Angular Build Output
        if: ${{ needs.angular-build.result == 'success' }}
        run: |
          echo "Angular build version: ${{ needs.angular-build.outputs.version }}"
      - name: Log .NET Build Output
        if: ${{ needs.dotnet-build.result == 'success' }}
        run: |
          echo "Dotnet build completed for: ${{ github.event.inputs.component }}"
      - name: Log SQL DACPAC Build Output
        if: ${{ needs.sql-dacpac-build.result == 'success' }}
        run: |
          echo "SQL DACPAC build completed for: ${{ github.event.inputs.component }}"
      - name: Create Job Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          if [[ '${{ needs.angular-build.result }}' == 'success' ]]; then
            echo "- **Component:** ${{ github.event.inputs.component }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Type:** Angular" >> $GITHUB_STEP_SUMMARY
            echo "- **Version:** ${{ needs.angular-build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          elif [[ '${{ needs.dotnet-build.result }}' == 'success' ]]; then
            echo "- **Component:** ${{ github.event.inputs.component }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Type:** .NET" >> $GITHUB_STEP_SUMMARY
            echo "- **Version:** N/A" >> $GITHUB_STEP_SUMMARY
          elif [[ '${{ needs.sql-dacpac-build.result }}' == 'success' ]]; then
            echo "- **Component:** ${{ github.event.inputs.component }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Type:** SQL DACPAC" >> $GITHUB_STEP_SUMMARY
            echo "- **Version:** N/A" >> $GITHUB_STEP_SUMMARY
          else
            echo "No build was run." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Release URL:** ${{ needs.angular-build.outputs.RELEASE_URL }}" >> $GITHUB_STEP_SUMMARY
          if [[ -n "${{ needs.angular-build.outputs.ARTIFACT_URL }}" ]]; then
            echo "- **Artifact Download:** ${{ needs.angular-build.outputs.ARTIFACT_URL }}" >> $GITHUB_STEP_SUMMARY
          fi
        shell: bash
