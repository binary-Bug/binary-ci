name: "🏗️ Build Artifact"
run-name: "Build Artifact for ${{ github.event.inputs.component }}"

on:
  workflow_dispatch:
    inputs:
      component:
        description: "Select component"
        required: true
        type: choice
        options:
        - test-db
        - test-api
        - test-ui
          - piggy-ui
          - piggy-api
          - piggy-db
      component_type:
        description: "Select component type"
        required: true
        type: choice
        options:
        - test-db
        - test-api
        - test-ui
          - angular
          - .net
          - sql-dacpac
      release_type:
        description: Release type
        required: true
        type: choice
        options: [patch, minor, major]
        - test-db
        - test-api
        - test-ui
      is_pre_release:
        description: "Is this a pre-release?"
        required: false
        type: boolean
      auto-deploy:
        description: "Automatically trigger deployment workflow after build?"
        required: false
        type: boolean
        default: true

jobs:
  setup-job:
    name: "🛠️ Setup Build Context"
    runs-on: ubuntu-latest
    outputs:
      component_type_capitalized: ${{ steps.capitalize_type.outputs.cap_type }}
      repo_name: ${{ steps.compose_repo.outputs.repo_name }}
      major: ${{ steps.versioning.outputs.major }}
      minor: ${{ steps.versioning.outputs.minor }}
      patch: ${{ steps.versioning.outputs.patch }}
      version: ${{ steps.versioning.outputs.version }}
    steps:
      - name: Capitalize Component Type
        id: capitalize_type
        run: |
          TYPE="${{ github.event.inputs.component_type }}"
          CAP_TYPE="$(echo ${TYPE:0:1} | tr '[:lower:]' '[:upper:]')${TYPE:1}"
          echo "cap_type=$CAP_TYPE" >> $GITHUB_OUTPUT
        shell: bash
      - name: Compose Repository Name
        id: compose_repo
        run: |
          REPO_NAME="${{ vars.REPO_OWNER }}${{ github.event.inputs.component }}"
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
        shell: bash
      - name: Fetch current version variables
        id: fetch_vars
        run: |
          for V in MAJOR MINOR PATCH; do
            VAL=$(gh variable get "$V" --repo "${{ steps.compose_repo.outputs.repo_name }}" 2>/dev/null)
            if [ -z "$VAL" ]; then
              VAL=0
              gh variable set "$V" --body "$VAL" --repo "${{ steps.compose_repo.outputs.repo_name }}"
              echo "Created $V=$VAL in repo"
            fi
            echo "$V=$VAL" >> $GITHUB_ENV
          done
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        shell: bash
      - name: Calculate New Version
        id: versioning
        run: |
          MAJOR=${MAJOR}
          MINOR=${MINOR}
          PATCH=${PATCH}
          if [[ "${{ github.event.inputs.release_type }}" == "major" ]]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [[ "${{ github.event.inputs.release_type }}" == "minor" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            PATCH=$((PATCH + 1))
          fi
          VERSION="v${MAJOR}.${MINOR}.${PATCH}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "major=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor=$MINOR" >> $GITHUB_OUTPUT
          echo "patch=$PATCH" >> $GITHUB_OUTPUT
        shell: bash

  angular-build:
    name: "Angular Build"
    if: ${{ github.event.inputs.component_type == 'angular' }}
    needs: setup-job
    runs-on: ubuntu-latest
    environment: "ci-angular"
    outputs:
      VERSION: ${{ steps.angular_build_action.outputs.VERSION }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Angular Build Action
        id: angular_build_action
        uses: ./.github/build_actions/angular
        with:
          component: ${{ github.event.inputs.component }}
          personal_access_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          repo_name: ${{ needs.setup-job.outputs.repo_name }}
          version: ${{ needs.setup-job.outputs.version }}

  dotnet-build:
    name: ".NET Build"
    if: ${{ github.event.inputs.component_type == '.net' }}
    needs: setup-job
    runs-on: ubuntu-latest
    environment: "ci-dotnet"
    outputs:
      VERSION: ${{ steps.dotnet_build_action.outputs.VERSION }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Dotnet Build Action
        id: dotnet_build_action
        uses: ./.github/build_actions/dotnet
        with:
          component: ${{ github.event.inputs.component }}
          personal_access_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          repo_name: ${{ needs.setup-job.outputs.repo_name }}
          version: ${{ needs.setup-job.outputs.version }}

  sql-dacpac-build:
    name: "SQL Dacpac Build"
    if: ${{ github.event.inputs.component_type == 'sql-dacpac' }}
    needs: setup-job
    runs-on: windows-latest
    environment: "ci-sql-dacpac"
    outputs:
      VERSION: ${{ steps.sql_dacpac_build_action.outputs.VERSION }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: SQL Dacpac Build Action
        id: sql_dacpac_build_action
        uses: ./.github/build_actions/sql-dacpac
        with:
          component: ${{ github.event.inputs.component }}
          personal_access_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          repo_name: ${{ needs.setup-job.outputs.repo_name }}
          version: ${{ needs.setup-job.outputs.version }}

  finalize-release:
    name: "🚀 Finalize Release"
    needs:
      - setup-job
      - angular-build
      - dotnet-build
      - sql-dacpac-build
    runs-on: ubuntu-latest
    if: ${{ always() && (needs.angular-build.result == 'success' || needs.dotnet-build.result == 'success' || needs.sql-dacpac-build.result == 'success') }}
    outputs:
      release_url: ${{ steps.create_release.outputs.release_url }}
    steps:
      - name: Checkout Component Repo (Full History)
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.setup-job.outputs.repo_name }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          ref: master
          fetch-depth: 0
      - name: Update version variables in component repo
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          REPO: ${{ needs.setup-job.outputs.repo_name }}
          MAJOR: ${{ needs.setup-job.outputs.major }}
          MINOR: ${{ needs.setup-job.outputs.minor }}
          PATCH: ${{ needs.setup-job.outputs.patch }}
        run: |
          for V in MAJOR MINOR PATCH; do
            gh variable set "$V" \
              --body "${!V}" \
              --repo "$REPO"
            echo "Updated $V=${!V}"
          done
        shell: bash
      - name: Create Git Tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "${{ needs.setup-job.outputs.version }}" \
                   -m "Release ${{ needs.setup-job.outputs.version }}"
          git push origin "${{ needs.setup-job.outputs.version }}"
        shell: bash
      - name: Generate Changelog
        run: |
          TAGS=$(git tag --sort=-creatordate)
          if [ -z "$TAGS" ]; then
            # No previous tags, get all commits
            CHANGELOG=$(git log --pretty=format:'- %s')
            echo "No previous tags found. Showing all commits."
          else
            LAST_TAG=$(echo "$TAGS" | head -n 1)
            CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:'- %s')
            echo "Previous tag: $LAST_TAG"
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF"      >> $GITHUB_ENV
        shell: bash
      - name: Create Release on Component via gh
        id: create_release
        run: |
          COMPONENT=${{ github.event.inputs.component }}
          TAG=${{ needs.setup-job.outputs.version }}
          if [[ "${{ github.event.inputs.is_pre_release }}" == "true" ]]; then
            PRE="--prerelease"
          else
            PRE=""
          fi
          RUN_NUM=${{ github.run_number }}
          RUN_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          gh release create "$TAG" \
            --repo "${{ needs.setup-job.outputs.repo_name }}" \
            --title "${{ github.ref_name }} $TAG" \
            --notes "$(
              printf '## Changelog\n%s\n\n**Workflow run**: [%s](%s)\n\n_Generated by Binary CI_\n' \
                "${{ env.CHANGELOG }}" \
                "CI Run #${RUN_NUM}" \
                "${RUN_URL}"
            )" \
            --draft=false $PRE
          # Manually build the release URL
          REPO_URL="https://github.com/${{ needs.setup-job.outputs.repo_name }}"
          RELEASE_URL="$REPO_URL/releases/tag/$TAG"
          echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        shell: bash

  # Trigger deployment workflow after build
  trigger-deploy-artifact:
    name: "Trigger Deploy Artifact Workflow"
    if: ${{ always() && github.event.inputs.auto-deploy == 'true' }}
    needs:
      - finalize-release
    runs-on: ubuntu-latest
    outputs:
      deploy_run_url: ${{ steps.get_deploy_url.outputs.deploy_run_url }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Trigger deploy_artifact workflow
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          gh workflow run deploy_artifact.yaml \
            --ref ${{ github.ref }} \
            --field component="${{ github.event.inputs.component }}" \
            --field version="latest"
      - name: Get triggered deploy workflow run URL
        id: get_deploy_url
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          # Wait a few seconds to ensure the run is registered
          sleep 5
          RUN_ID=$(gh run list --workflow=deploy_artifact.yaml --branch ${{ github.ref_name }} --limit 1 --json databaseId --jq '.[0].databaseId')
          DEPLOY_RUN_URL="https://github.com/${{ github.repository }}/actions/runs/$RUN_ID"
          echo "Deploy workflow run URL: $DEPLOY_RUN_URL"
          echo "DEPLOY_RUN_URL=$DEPLOY_RUN_URL" >> $GITHUB_ENV
          echo "::set-output name=deploy_run_url::$DEPLOY_RUN_URL"

  create-build-summary:
    name: "📝 ${{ needs.setup-job.outputs.component_type_capitalized }} Output"
    needs:
      - setup-job
      - angular-build
      - dotnet-build
      - sql-dacpac-build
      - finalize-release
      - trigger-deploy-artifact
    runs-on: ubuntu-latest
    if: ${{ always() && (needs.angular-build.result == 'success' || needs.dotnet-build.result == 'success' || needs.sql-dacpac-build.result == 'success') }}
    steps:
      - name: Log Angular Build Output
        if: ${{ needs.angular-build.result == 'success' }}
        run: |
          echo "Angular build version: ${{ needs.angular-build.outputs.version }}"
      - name: Log .NET Build Output
        if: ${{ needs.dotnet-build.result == 'success' }}
        run: |
          echo "Dotnet build version: ${{ needs.dotnet-build.outputs.VERSION }}"
      - name: Log SQL DACPAC Build Output
        if: ${{ needs.sql-dacpac-build.result == 'success' }}
        run: |
          echo "SQL DACPAC build version: ${{ needs.sql-dacpac-build.outputs.VERSION }}"
      - name: Create Job Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          if [[ '${{ needs.angular-build.result }}' == 'success' ]]; then
            echo "- **Component:** ${{ github.event.inputs.component }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Type:** Angular" >> $GITHUB_STEP_SUMMARY
            echo "- **Version:** ${{ needs.angular-build.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          elif [[ '${{ needs.dotnet-build.result }}' == 'success' ]]; then
            echo "- **Component:** ${{ github.event.inputs.component }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Type:** .NET" >> $GITHUB_STEP_SUMMARY
            echo "- **Version:** ${{ needs.dotnet-build.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          elif [[ '${{ needs.sql-dacpac-build.result }}' == 'success' ]]; then
            echo "- **Component:** ${{ github.event.inputs.component }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Type:** SQL DACPAC" >> $GITHUB_STEP_SUMMARY
            echo "- **Version:** ${{ needs.sql-dacpac-build.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "No build was run." >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Release URL:** ${{ needs.finalize-release.outputs.release_url }}" >> $GITHUB_STEP_SUMMARY
          if [[ '${{ needs.trigger-deploy-artifact.result }}' == 'success' && '${{ needs.trigger-deploy-artifact.outputs.deploy_run_url }}' != '' ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## 🚀 Auto Deployment Triggered" >> $GITHUB_STEP_SUMMARY
            echo "The auto deployment workflow was triggered successfully." >> $GITHUB_STEP_SUMMARY
            echo "- [View Deploy Workflow Run](${{ needs.trigger-deploy-artifact.outputs.deploy_run_url }})" >> $GITHUB_STEP_SUMMARY
          fi
        shell: bash
