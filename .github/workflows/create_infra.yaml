# - Takes env_name (used for both resource_group_name and name_prefix) and run_apply as inputs
# - Installs Terraform, logs into Azure, runs import, init, plan, and optionally apply
# - Each job logs into Azure to ensure env vars are available

run-name: Creating infrastructure - ${{ github.event.inputs.rg_name }}
name: "☁️ Create Infrastructure"

on:
  workflow_dispatch:
    inputs:
      rg_name:
        description: "Resource group name"
        required: true
        default: "eat-career"
        type: string

      name_prefix:
        description: "Prefix name (used for adding prefix to resources)"
        required: true
        default: "eat"
        type: string

      run_apply:
        description: "Run terraform apply?"
        required: false
        default: false
        type: boolean

concurrency:
  group: create-infra
  cancel-in-progress: true

jobs:
  import:
    name: "Terraform Import"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra
    env:
      TF_VAR_resource_group_name: ${{ inputs.rg_name }}
      TF_VAR_name_prefix: ${{ inputs.name_prefix }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init
        run: terraform init

      # Import the resource group for the given env_name, handle error gracefully
      - name: Terraform Import Resource Group
        run: |
          set -e
          IMPORT_CMD="terraform import azurerm_resource_group.main "/subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/${{ inputs.rg_name }}""
          echo "Running: $IMPORT_CMD"
          if $IMPORT_CMD; then
            echo "Terraform import succeeded."
          else
            echo "Terraform import failed. Resource group may not exist. Creating empty tfstate file."
            echo '{"version":4,"resources":[]}' > terraform.tfstate
          fi
          exit 0

      - name: Upload Terraform State
        uses: actions/upload-artifact@v4
        with:
          name: tfstate-${{ inputs.rg_name }}
          path: infra/terraform.tfstate*

  plan:
    name: "Terraform Init & Plan"
    runs-on: ubuntu-latest
    needs: import
    defaults:
      run:
        working-directory: infra
    env:
      TF_VAR_resource_group_name: ${{ inputs.rg_name }}
      TF_VAR_name_prefix: ${{ inputs.name_prefix }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Terraform State
        uses: actions/download-artifact@v4
        with:
          name: tfstate-${{ inputs.rg_name }}
          path: infra

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -var "resource_group_name=${{ inputs.rg_name }}" -var "name_prefix=${{ inputs.name_prefix }}" | tee plan.txt

      - name: Upload Terraform Plan Output
        uses: actions/upload-artifact@v4
        with:
          name: plan-output
          path: infra/plan.txt
  plan-summary:
    name: "Terraform Plan Output"
    runs-on: ubuntu-latest
    needs: plan
    steps:
      - name: Download Terraform Plan Output
        uses: actions/download-artifact@v4
        with:
          name: plan-output
          path: infra

      - name: Add Terraform Plan to Job Summary
        run: |
          PLAN_SUMMARY=$(awk '/^Plan:/,/^$/' infra/plan.txt)
          echo "**${PLAN_SUMMARY}**" >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '**Changes to Outputs:**' >> $GITHUB_STEP_SUMMARY
          # Extract app_service_names block
          awk '/app_service_names = \[/, /\]/{if ($0 !~ /app_service_names = \[/ && $0 !~ /\]/) print "  - " $0}' infra/plan.txt | sed 's/[",]//g;s/^ *- *$/  - (none)/' >> $GITHUB_STEP_SUMMARY
          # Extract app_service_plan_name value
          awk '/app_service_plan_name = /{print "- app_service_plan_name:\n  - " $NF}' infra/plan.txt | sed 's/[",]//g' >> $GITHUB_STEP_SUMMARY

  apply:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    needs: plan
    if: ${{ always() && github.event.inputs.run_apply == 'true' }}
    defaults:
      run:
        working-directory: infra
    env:
      TF_VAR_resource_group_name: ${{ inputs.rg_name }}
      TF_VAR_name_prefix: ${{ inputs.name_prefix }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Terraform State
        uses: actions/download-artifact@v4
        with:
          name: tfstate-${{ inputs.rg_name }}
          path: infra

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -var "resource_group_name=${{ inputs.rg_name }}" -var "name_prefix=${{ inputs.name_prefix }}" -out=tfplan

      - name: Terraform Apply
        run: terraform apply -auto-approve -var "resource_group_name=${{ inputs.rg_name }}" -var "name_prefix=${{ inputs.name_prefix }}" tfplan
