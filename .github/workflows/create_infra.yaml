# - Takes env_name (used for both resource_group_name and name_prefix) and run_apply as inputs
# - Installs Terraform, logs into Azure, runs import, init, plan, and optionally apply
# - Each job logs into Azure to ensure env vars are available

run-name: Creating infrastructure - ${{ github.event.inputs.env_name }}
name: '☁️ Create Infrastructure'

on:
  workflow_dispatch:
    inputs:
      env_name:
        description: 'Environment name (used for resource group and name prefix)'
        required: true
        default: "piggy"
        type: string

      run_import:
        description: 'Run terraform import?'
        required: false
        default: true
        type: boolean

      run_apply:
        description: 'Run terraform apply?'
        required: false
        default: false
        type: boolean

concurrency:
  group: create-infra
  cancel-in-progress: true

jobs:
  import:
    if: ${{ always() && github.event.inputs.run_import == 'true' }}
    name: 'Terraform Import'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infra
    env:
      TF_VAR_resource_group_name: ${{ inputs.env_name }}
      TF_VAR_name_prefix: ${{ inputs.env_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZ_CREDS }}

      - name: Check Current Directory and cd to infra if needed
        run: |
          echo "Current directory: $(pwd)"
          if [ "$(basename $(pwd))" != "infra" ]; then cd infra; fi
          pwd

      - name: Terraform Init
        run: terraform init

      # Import the resource group for the given env_name
      - name: Terraform Import Resource Group
        run: |
          terraform import azurerm_resource_group.main "/subscriptions/${{ env.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ inputs.env_name }}"
      - name: Upload Terraform State
        uses: actions/upload-artifact@v4
        with:
          name: tfstate
          path: infra/terraform.tfstate*

  plan:
    name: 'Terraform Init & Plan'
    runs-on: ubuntu-latest
    needs: import
    defaults:
      run:
        working-directory: infra
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # - name: Download Terraform State
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: tfstate
      #     path: infra

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZ_CREDS }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -var "resource_group_name=${{ inputs.env_name }}" -var "name_prefix=${{ inputs.env_name }}"

  apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: plan
    if: ${{ always() && github.event.inputs.run_apply == 'true' }}
    defaults:
      run:
        working-directory: infra
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Download Terraform State
        uses: actions/download-artifact@v4
        with:
          name: tfstate
          path: infra

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZ_CREDS }}

      - name: Terraform Apply
        run: terraform apply -auto-approve -var "resource_group_name=${{ inputs.env_name }}" -var "name_prefix=${{ inputs.env_name }}"