name: "🚀 Deploy Artifact"
run-name: "Deploy Artifact for ${{ github.event.inputs.component }}"

on:
  workflow_dispatch:
    inputs:
      component:
        description: "Select component"
        required: true
        type: choice
        options:
          - piggy-ui
          - piggy-api
          - piggy-db
      version:
        description: "Version to deploy (e.g., 0.8.17 or 'latest')"
        required: true
        type: string
        default: latest
      resource_type:
        description: "Select resource type to deploy to"
        required: true
        type: choice
        options:
          - Azure App service
          - Azure SQL database

jobs:
  setup-deployment:
    name: 'Setup Deployment'
    runs-on: ubuntu-latest
    outputs:
      artifact_name: ${{ steps.find_artifact_and_run_id.outputs.artifact_name }}
      run_id: ${{ steps.find_artifact_and_run_id.outputs.run_id }}
      formatted_component: ${{ steps.format_component.outputs.component_env }}
    steps:
      - name: Format component as env var
        id: format_component
        run: |
          COMPONENT_ENV=$(echo "${{ github.event.inputs.component }}" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
          echo "Formatted component: $COMPONENT_ENV"
          echo "component_env=$COMPONENT_ENV" >> $GITHUB_OUTPUT
      - name: Find artifact and run id
        id: find_artifact_and_run_id
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          COMPONENT="${{ github.event.inputs.component }}"
          VERSION="${{ github.event.inputs.version }}"
          if [ "$VERSION" = "latest" ]; then
            # Find all artifacts for the component, sort by created_at desc, pick the latest
          gh api repos/${{ github.repository }}/actions/artifacts --jq \
          ".artifacts[] | select(.name | test(\"^$COMPONENT-v[0-9]+\\\\.[0-9]+\\\\.[0-9]+$\")) | {name, created_at, run_id: .workflow_run.id}" | jq -s '.' > artifacts.json
            LATEST=$(jq -r 'sort_by(.created_at) | reverse | .[0]' artifacts.json)
            ARTIFACT_NAME=$(echo "$LATEST" | jq -r '.name')
            RUN_ID=$(echo "$LATEST" | jq -r '.run_id')
            if [ "$ARTIFACT_NAME" = "null" ] || [ -z "$ARTIFACT_NAME" ]; then
              echo "No artifact found for component $COMPONENT" >&2
              exit 1
            fi
          else
            ARTIFACT_NAME="$COMPONENT-v$VERSION"
            RUN_ID=$(gh api repos/${{ github.repository }}/actions/artifacts \
              --jq ".artifacts[] | select(.name == \"$ARTIFACT_NAME\") | .workflow_run.id" | head -n 1)
            if [ -z "$RUN_ID" ]; then
              echo "No workflow run found for artifact $ARTIFACT_NAME" >&2
              exit 1
            fi
          fi
          echo "The artifact to download is $ARTIFACT_NAME (run id: $RUN_ID)"
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
  
  deploy-app-service:
    name: 'Deploy App Service'
    needs:
      - setup-deployment
    if: ${{ github.event.inputs.resource_type == 'Azure App service' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact from github storage
        uses: actions/download-artifact@v5
        with:
          name: ${{ needs.setup-deployment.outputs.artifact_name }}
          path: ./artifact
          run-id: ${{ needs.setup-deployment.outputs.run_id }}
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: 'piggy-ui'
        id: deploy-piggy-ui
        if: ${{ github.event.inputs.component == 'piggy-ui' }}
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ github.event.inputs.component }}
          slot-name: "Production"
          publish-profile: ${{ secrets.PIGGY_UI_AZURE_PUBLISH_PROFILE }}
          package: ./artifact
      - name: 'piggy-api'
        id: deploy-piggy-api
        if: ${{ github.event.inputs.component == 'piggy-api' }}
        uses: azure/webapps-deploy@v3
        with:
          app-name: dotnet-sql
          slot-name: "Production"
          publish-profile: ${{ secrets.PIGGY_API_AZURE_PUBLISH_PROFILE }}
          package: ./artifact

  deployment-summary:
    name: '📝 Output'
    needs:
      - setup-deployment
      - deploy-app-service
    runs-on: ubuntu-latest
    steps:
      - name: Create Deployment Summary
        run: |
          echo "# Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifact Name:** ${{ needs.setup-deployment.outputs.artifact_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow Run:** [View Run](https://github.com/${{ github.repository }}/actions/runs/${{ needs.setup-deployment.outputs.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID:** ${{ needs.setup-deployment.outputs.run_id }}" >> $GITHUB_STEP_SUMMARY