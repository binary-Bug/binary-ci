name: "🚀 Deploy Artifact"
run-name: "Deploy Artifact for ${{ github.event.inputs.component }}"

on:
  workflow_dispatch:
    inputs:
      component:
        description: "Select component"
        required: true
        type: choice
        options:
          - piggy-ui
          - piggy-api
          - piggy-db
          - eat-ui
          - eat-api
          - eat-db
          - piggy-ui
          - piggy-api
          - piggy-db
      version:
        description: "Version to deploy (e.g., 0.8.17 or 'latest')"
        required: true
        type: string
        default: latest

jobs:
  setup-deployment:
    name: "Setup Deployment"
    runs-on: ubuntu-latest
    outputs:
      artifact_name: ${{ steps.find_artifact_and_run_id.outputs.artifact_name }}
      run_id: ${{ steps.find_artifact_and_run_id.outputs.run_id }}
      formatted_component: ${{ steps.format_component.outputs.component_env }}
      resource_type: ${{ steps.set_resource_type.outputs.resource_type }}
    steps:
      - name: Format component as env var
        id: format_component
        run: |
          COMPONENT_ENV=$(echo "${{ github.event.inputs.component }}" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
          echo "Formatted component: $COMPONENT_ENV"
          echo "component_env=$COMPONENT_ENV" >> $GITHUB_OUTPUT
      - name: Set resource type
        id: set_resource_type
        run: |
          if [[ "${{ github.event.inputs.component }}" == *ui* || "${{ github.event.inputs.component }}" == *api* ]]; then
            echo "resource_type=Azure App service" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.component }}" == *db* ]]; then
            echo "resource_type=Azure SQL database" >> $GITHUB_OUTPUT
          else
            echo "resource_type=unknown" >> $GITHUB_OUTPUT
          fi
      - name: Find artifact and run id
        id: find_artifact_and_run_id
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          COMPONENT="${{ github.event.inputs.component }}"
          VERSION="${{ github.event.inputs.version }}"
          if [ "$VERSION" = "latest" ]; then
            # Find all artifacts for the component, sort by created_at desc, pick the latest
          gh api repos/${{ github.repository }}/actions/artifacts --jq \
          ".artifacts[] | select(.name | test(\"^$COMPONENT-v[0-9]+\\\\.[0-9]+\\\\.[0-9]+$\")) | {name, created_at, run_id: .workflow_run.id}" | jq -s '.' > artifacts.json
            LATEST=$(jq -r 'sort_by(.created_at) | reverse | .[0]' artifacts.json)
            ARTIFACT_NAME=$(echo "$LATEST" | jq -r '.name')
            RUN_ID=$(echo "$LATEST" | jq -r '.run_id')
            if [ "$ARTIFACT_NAME" = "null" ] || [ -z "$ARTIFACT_NAME" ]; then
              echo "No artifact found for component $COMPONENT" >&2
              exit 1
            fi
          else
            ARTIFACT_NAME="$COMPONENT-v$VERSION"
            RUN_ID=$(gh api repos/${{ github.repository }}/actions/artifacts \
              --jq ".artifacts[] | select(.name == \"$ARTIFACT_NAME\") | .workflow_run.id" | head -n 1)
            if [ -z "$RUN_ID" ]; then
              echo "No workflow run found for artifact $ARTIFACT_NAME" >&2
              exit 1
            fi
          fi
          echo "The artifact to download is $ARTIFACT_NAME (run id: $RUN_ID)"
          echo "artifact_name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT

  deploy-app-service:
    name: "Deploy App Service"
    environment: "cd-app-service"
    needs:
      - setup-deployment
    if: ${{ needs.setup-deployment.outputs.resource_type == 'Azure App service' }}
    runs-on: ubuntu-latest
    outputs:
      app-url: ${{ steps.deploy.outputs.webapp-url }}
    steps:
      - name: Download artifact from github storage
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.setup-deployment.outputs.artifact_name }}
          path: ./artifact
          run-id: ${{ needs.setup-deployment.outputs.run_id }}
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZ_CREDS }}

      - name: Find Resource Group for App
        id: find_rg
        run: |
          RG=$(az webapp list --query "[?name=='${{ github.event.inputs.component }}'].resourceGroup" -o tsv)
          if [ -z "$RG" ]; then
            echo "Resource group not found for app ${{ github.event.inputs.component }}"
            exit 1
          fi
          echo "resource_group=$RG" >> $GITHUB_OUTPUT

      - name: Fetch Publish Profile
        shell: bash
        run: |
          az webapp deployment list-publishing-profiles \
            --name "${{ github.event.inputs.component }}" \
            --resource-group "${{ steps.find_rg.outputs.resource_group }}" \
            --xml > fullProfile.xml

          # Extract only the MSDeploy profile
          awk 'BEGIN { RS="</publishProfile>"; ORS="" }/<publishProfile/ && /publishMethod="MSDeploy"/ {print $0"</publishProfile></publishData>\n"}' fullProfile.xml > publishProfile.xml

      - name: Read publish profile XML
        id: read_profile
        run: |
          profile=$(<publishProfile.xml)
          echo "profile<<EOF" >> $GITHUB_OUTPUT
          echo "$profile" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Deploy App Service (${{ github.event.inputs.component }})
        id: deploy
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ github.event.inputs.component }}
          slot-name: "Production"
          publish-profile: ${{ steps.read_profile.outputs.profile }}
          package: ./artifact

  deploy-sql-database:
    name: "Deploy SQL Database"
    environment: "cd-azure-database"
    needs:
      - setup-deployment
    if: ${{ needs.setup-deployment.outputs.resource_type == 'Azure SQL database' }}
    runs-on: ubuntu-latest
    #outputs:
    #server:
    #database:
    steps:
      - name: Download artifact from github storage
        uses: actions/download-artifact@v5
        with:
          name: ${{ needs.setup-deployment.outputs.artifact_name }}
          path: ./artifact
          run-id: ${{ needs.setup-deployment.outputs.run_id }}
          github-token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZ_CREDS }}

      - name: "Get SQL connection string"
        id: get-connection-string
        env:
          GH_SECRET_AZURE_DB_PASSWORD: ${{ secrets.AZURE_DB_PASSWORD }}
        run: |
          component="${{ github.event.inputs.component }}"

          # Extract server name: everything before the first '-'
          sql_server="${component%%-*}"

          database_name=$component

          # Get connection string using az CLI
          conn=$(az sql db show-connection-string \
            --client ado.net \
            --name "$database_name" \
            --server "$sql_server" \
            --output tsv)

          echo "SQL Conn string from az is $conn"

          conn_updated=$(echo "$conn" | sed -E \
          -e "s#User ID=[^;]+;Password=[^;]+;#User ID=sqladminuser;Password=${GH_SECRET_AZURE_DB_PASSWORD};#" \
          -e "s/Connection Timeout=30/Connection Timeout=90/")

          echo "Updated conn string is $conn_updated"

          echo "Updated conn string contains password of length: ${#GH_SECRET_AZURE_DB_PASSWORD}"

          echo "sql-connection=$conn_updated" >> $GITHUB_OUTPUT

      - name: Install sqlpackage and add to PATH
        run: |
          wget -O sqlpackage.zip https://aka.ms/sqlpackage-linux
          unzip -o sqlpackage.zip -d sqlpackage
          chmod +x sqlpackage/sqlpackage
          echo "$PWD/sqlpackage" >> $GITHUB_PATH

      - name: "Deploy SQL DACPAC (${{ github.event.inputs.component }})"
        id: deploy-sql-database
        uses: Azure/sql-action@v2.3
        with:
          connection-string: ${{ steps.get-connection-string.outputs.sql-connection }}
          path: "./artifact/${{ github.event.inputs.component }}.dacpac"
          action: "publish"
          arguments: >-
            /p:DropObjectsNotInSource=true
            /p:BlockOnPossibleDataLoss=false
            /p:IgnorePermissions=true
            /p:DoNotDropObjectTypes=Users;RoleMembership;DatabaseRoles;DatabaseTriggers;Assemblies;Filegroups;FullTextCatalogs;FullTextStoplists;SearchPropertyLists;Sequences;Synonyms;XMLSchemaCollections;PartitionSchemes;PartitionFunctions;ExtendedProperties;MessageTypes;RemoteServiceBindings;Routes;Contracts;Queues;Services

  post-deployment:
    name: "Post Deployment"
    env:
      GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
    needs:
      - setup-deployment
      - deploy-app-service
      - deploy-sql-database
    runs-on: ubuntu-latest
    if: always() && (needs.deploy-app-service.result == 'success' || needs.deploy-sql-database.result == 'success')
    steps:
      - name: Create Deployment
        id: create_deployment
        run: |
          response=$(gh api \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ vars.REPO_OWNER }}${{ github.event.inputs.component }}/deployments \
            --input - <<EOF
          {
            "ref": "master",
            "environment": "Production",
            "description": "Deployed via CD pipeline",
            "required_contexts": [],
            "transient_environment": false,
            "production_environment": true
          }
          EOF
          )
          echo "deployment_id=$(echo "$response" | jq -r '.id')" >> $GITHUB_OUTPUT
      - name: Update Deployment Status
        run: |
          gh api \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            /repos/${{ vars.REPO_OWNER }}${{ github.event.inputs.component }}/deployments/${{ steps.create_deployment.outputs.deployment_id }}/statuses \
            --input - <<EOF
          {
            "state": "success",
            "log_url": "${{ needs.deploy-app-service.outputs.app-url }}",
            "environment_url": "${{ needs.deploy-app-service.outputs.app-url }}"
          }
          EOF

  deployment-summary:
    name: "📝 Output"
    needs:
      - setup-deployment
      - deploy-app-service
      - deploy-sql-database
      - post-deployment
    runs-on: ubuntu-latest
    if: always() && (needs.deploy-app-service.result == 'success' || needs.deploy-sql-database.result == 'success')
    steps:
      - name: Create Deployment Summary
        run: |
          echo "# Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Artifact Name:** ${{ needs.setup-deployment.outputs.artifact_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow Run:** [View Run](https://github.com/${{ github.repository }}/actions/runs/${{ needs.setup-deployment.outputs.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID:** ${{ needs.setup-deployment.outputs.run_id }}" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ needs.deploy-app-service.outputs.app-url }}" ]; then
            echo "- **App URL:** ${{ needs.deploy-app-service.outputs.app-url }}" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ needs.setup-deployment.outputs.resource_type }}" = "Azure SQL database" ]; then
            component="${{ github.event.inputs.component }}"

            # Extract server name: everything before the first '-'
            sql_server="${component%%-*}"

            echo "- **Database:** ${{ github.event.inputs.component }}" >> $GITHUB_STEP_SUMMARY
            echo "- **SQL Server:** $sql_server.database.windows.net" >> $GITHUB_STEP_SUMMARY
          fi
